# Use the specific Superset base image
FROM --platform={{ARCH_TYPE}} {{BASE_IMAGE}} 

# Define an argument for architecture type, with a default value filled by the templating system
ARG ARCH_TYPE={{ARCH_TYPE}}

# Switching to root to install the required packages
USER root

# Install system packages
RUN apt-get update && \
  apt-get install --no-install-recommends -y firefox-esr wget

# Set the version for Geckodriver
ENV GECKODRIVER_VERSION=0.35.0

# Install Geckodriver with conditional architecture based on ARCH_TYPE
RUN if [ "$ARCH_TYPE" = "linux/amd64" ]; then \
      wget -q https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz && \
      tar -x geckodriver -zf geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz -O > /usr/bin/geckodriver && \
      rm geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz; \
    elif [ "$ARCH_TYPE" = "linux/arm64" ]; then \
      wget -q https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-linux-aarch64.tar.gz && \
      tar -x geckodriver -zf geckodriver-v${GECKODRIVER_VERSION}-linux-aarch64.tar.gz -O > /usr/bin/geckodriver && \
      rm geckodriver-v${GECKODRIVER_VERSION}-linux-aarch64.tar.gz; \
    else \
      echo "Unsupported architecture: $ARCH_TYPE" && exit 1; \
    fi && \
    chmod 755 /usr/bin/geckodriver

# Upgrade pip
RUN pip install --upgrade pip

# Install the necessary Python packages
RUN pip install --no-cache gevent psycopg2-binary redis celery flower pytz 
RUN pip install --upgrade urllib3 requests botocore boto3 authlib python-dotenv flask_cors
RUN pip install --upgrade sqlalchemy-bigquery pandas_gbq google-auth
# Example: installing a driver to connect to Redshift
# Uncomment and customize the following line if needed
# RUN pip install sqlalchemy-redshift

# Switching back to using the `superset` user
USER superset
